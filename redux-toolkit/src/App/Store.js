import { configureStore } from "@reduxjs/toolkit"; // Importing `configureStore` from Redux Toolkit.
// This is the primary function to create a Redux store.

import todoSlice from "../features/toDo/todoSlice"; // Importing the default export from your todoSlice file.
// This `todoSlice` is the reducer generated by `createSlice` that manages the 'todo' state.

// `configureStore` is a wrapper around the original Redux `createStore` that
// simplifies store setup by providing good defaults.
export const store = configureStore({
  // The `reducer` option tells Redux how to update the application's state.
  // When your application grows, you'd typically have multiple "slices" of state
  // (e.g., for users, products, etc.), and you'd combine their reducers here
  // using `combineReducers` (though `configureStore` handles it automatically
  // if you pass an object of reducers).
  reducer: todoSlice, // In this case, we only have one slice (`todoSlice`),
  // so we pass its reducer directly. If you had more, it would look like:
  // reducer: {
  //   todos: todoSlice,
  //   users: userSlice, // assuming you have a userSlice
  // }
});

// This `store` object is the central brain of your Redux application.
// It holds the entire state tree of your app and is responsible for dispatching actions
// and updating the state based on the reducers.
// You will provide this `store` to your React application using the `Provider` component
// from `react-redux`.
// Confirgure store from Redux/toolkit
